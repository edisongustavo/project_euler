'''
Created on 19/05/2010

@author: Guga

The sequence of triangle numbers is generated by adding the natural numbers.

So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
The first ten terms would be:

    1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28

We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
'''
import cProfile
import numbers
import primes
import unittest

class Problem12:
    def __init__(self):
        self.primeGenerator = primes.PrimeGenerator()
        self.primeFactors = numbers.PrimeFactors(self.primeGenerator)
        
    def getNumberDivisors(self, number):
        countedPrimeFactors = self.primeFactors.getCountedPrimeFactors(number)
    
        ret = 1
        for times in countedPrimeFactors.values():
            ret *= (times + 1)
        return ret
    
    def fillCache(self, number):
        self.primeGenerator.primeListUsingSieveOfEratosthenes(number)

def answer():
    problem12 = Problem12()
    problem12.fillCache(1000000)
    
    triangleNumber = 0
    while (True):
        i = 1
        triangleNumber += i 
        numberDivisors = problem12.getNumberDivisors(triangleNumber)
        if numberDivisors > 100:
            return triangleNumber
        i += 1
            
class Test(unittest.TestCase):
    def setUp(self):
        self.problem12 = Problem12()
        
    def testGetNumberDivisors(self):
        self.assertEqual(len([1, 3]), self.problem12.getNumberDivisors(3))
        self.assertEqual(len([1, 2, 4]), self.problem12.getNumberDivisors(4))
        self.assertEqual(len([1, 2, 3, 6]), self.problem12.getNumberDivisors(6))
        self.assertEqual(len([1, 2, 5, 10]), self.problem12.getNumberDivisors(10))
        self.assertEqual(len([1, 3, 5, 15]), self.problem12.getNumberDivisors(15))
        self.assertEqual(len([1, 2, 4, 5, 10, 20]), self.problem12.getNumberDivisors(20))
        self.assertEqual(len([1, 2, 4, 7, 14, 28]), self.problem12.getNumberDivisors(28))
        
        self.assertEqual(len([1, 2, 3, 4, 5, 6, 8, 10, 12, 15, 20, 24, 30, 40, 60, 120]), self.problem12.getNumberDivisors(120))

if __name__ == "__main__":
    cProfile.run('print(answer())')
