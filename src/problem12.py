'''
Created on 19/05/2010

@author: Guga

The sequence of triangle numbers is generated by adding the natural numbers.

So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
The first ten terms would be:

    1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28

We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
'''
import cProfile
import numbers
import primes
import pytest

class Problem12:
    def __init__(self):
        self.primeGenerator = primes.PrimeGenerator()
        self.primeFactors = numbers.PrimeFactors(self.primeGenerator)

    def getNumberDivisors(self, number):
        if number == 1:
            return 1

        # see http://mathschallenge.net/index.php?section=faq&ref=number/number_of_divisors
        countedPrimeFactors = self.primeFactors.getCountedPrimeFactors(number)

        ret = 1
        for times in list(countedPrimeFactors.values()):
            ret *= (times + 1)
        return ret

def answer():
    problem12 = Problem12()

    triangleNumber = 0
    i = 1
    while (True):
        triangleNumber += i
        numberDivisors = problem12.getNumberDivisors(triangleNumber)
        if numberDivisors > 500:
            return triangleNumber
        i += 1

@pytest.fixture
def problem12():
    return Problem12()

def testGetNumberDivisors(problem12):
    assert len([1, 3]) == problem12.getNumberDivisors(3)
    assert len([1, 2, 4]) == problem12.getNumberDivisors(4)
    assert len([1, 2, 3, 6]) == problem12.getNumberDivisors(6)
    assert len([1, 2, 5, 10]) == problem12.getNumberDivisors(10)
    assert len([1, 3, 5, 15]) == problem12.getNumberDivisors(15)
    assert len([1, 2, 4, 5, 10, 20]) == problem12.getNumberDivisors(20)
    assert len([1, 2, 4, 7, 14, 28]) == problem12.getNumberDivisors(28)

    assert len([1, 2, 3, 4, 5, 6, 8, 10, 12, 15, 20, 24, 30, 40, 60, 120]) == problem12.getNumberDivisors(120)

def testZAnswer():
    assert 76576500 == answer()

if __name__ == "__main__":
    cProfile.run('print(answer())')
